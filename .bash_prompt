#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the branch/status of the current git repository
#    * the existence of an active virtualenv environment
#    * the return value of the previous command
#
# USAGE:
#
#   1. Save this file as ~/.set_git_venv_bash_prompt
#   2. Add the following line to the end of your ~/.profile or ~/.bash_profile:
#        . ~/.set_git_venv_bash_prompt
#
# AUTHOR: Scott Woods <scott@westarete.com>
# FORKED BY: Hugo Rodger-Brown
#
# See https://gist.github.com/hugorodgerbrown/4143150 for details
#
echo "Setting up bash prompt"

# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"
  # Set color based on clean/staged/dirty.
  if [[ ${git_status} == *"Your branch is up to date"* ]]; then
    state="${GREEN}"
  elif [[ ${git_status} == *"Changes to be committed"* ]]; then
    state="${YELLOW}"
  else
    state="${RED}"
  fi
  #echo $state

  # Get the name of the branch.
  branch_pattern="^ On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  # BRANCH="${state}[${branch}]${remote}${COLOR_NONE} "
  BRANCH="${state}:$(git rev-parse --abbrev-ref HEAD)${remote}${COLOR_NONE} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\$"
  else
      PROMPT_SYMBOL="${RED}\$${COLOR_NONE}"
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # set the VENV variable based on whether we are working in
  # an active virtualenv environment
  if [ -n "$VIRTUAL_ENV" ] ; then
    VENV="[`basename \"$VIRTUAL_ENV\"`] "
  else
    VENV=""
  fi

  # Set the bash prompt variable.
  # user@machine /path/to/repo
  PS1="$VENV\w${BRANCH}\n${PROMPT_SYMBOL} "
  # PS1="\u@\h \w ${BRANCH}\n${PROMPT_SYMBOL} "
  # PS1="${BRANCH} ${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
